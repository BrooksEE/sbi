; demonstrate stack w/ push pop
;

assign _t0 21; global value in variable
jump 2 0; jmp to program main

; test function takes two parameters on the stack
; adds them and returns the value on the stack

label 1; this function obliterates _r0, _r1, _r2
pop _r0;
pop _r1;

add _r0 _r1 _r2;
print "stack pos in func ";
printd _sp;
print "\n";
print "stack 0 ";
printd _s0;
print " stack 1 ";
printd _s1;
print "\n";
push _r2;
ret;

label 2; program main

move _r0 0xab; // some arbitrary value we care greatly about
move _r1 0xcd; // another value
push _r0; // store that off since label1 destroyes it
push _r1; 

push _t0; // push a global variable
push 21; // push a constant
jump 1 1; call function 1 
pop _r3; // this is the function result
pop _r1; // restore _r1 
pop _r0; // restore _r0

debug _r0;
debug _r1;
debug _r3;
print "final stack pos ";
printd _sp
print "\n"
exit;



